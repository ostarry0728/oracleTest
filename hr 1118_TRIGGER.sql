-- TRIGGER 테스팅
-- EMP01 삭제&생성
DROP TABLE EMP01 CASCADE CONSTRAINTS;
CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(20),
    JOB VARCHAR2(50)
);
DESC EMP01;

CREATE OR REPLACE TRIGGER EMP01_TRIGGER
    AFTER INSERT ON EMP01
    FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.EMPNO || ','||:NEW.ENAME||'신입사원이 입사했습니다.');
END;
/

INSERT INTO EMP01 VALUES((SELECT NVL(MAX(EMPNO),0)+1 FROM EMP01), DBMS_RANDOM.STRING('U',4), 'IT_DEV');

-- SAL01 테이블을 생성해서  EMP01 입력이 되면 입력된 데이터를 SAL01에 제 입력
CREATE TABLE SAL01(
    SALNO NUMBER(4),
    SAL NUMBER,
    EMPNO NUMBER(4)
);
ALTER TABLE SAL01 ADD CONSTRAINT SAL01_SALNO_PK PRIMARY KEY(SALNO);
ALTER TABLE SAL01 ADD CONSTRAINT SAL01_EMPNO_FK FOREIGN KEY(EMPNO) REFERENCES EMP01(EMPNO);

SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME = 'SAL01';

CREATE SEQUENCE SAL01_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 100000
NOCYCLE
CACHE 2;

CREATE OR REPLACE TRIGGER EMP01_TRIGGER2
AFTER INSERT ON EMP01
FOR EACH ROW
BEGIN
    INSERT INTO SAL01 VALUES(SAL01_SEQ.NEXTVAL, 100000, :NEW.EMPNO);
    DBMS_OUTPUT.PUT_LINE(:NEW.EMPNO || '번호 사원이 SAL01에 잘 들어왔음.');
END;
/
INSERT INTO EMP01 VALUES((SELECT NVL(MAX(EMPNO),0)+1 FROM EMP01), DBMS_RANDOM.STRING('U',4), 'IT_DEV');
SELECT * FROM EMP01;
SELECT * FROM SAL01;

-- EMP01 에서 사원의 정보를 제거했을때 SAL01 해당되는 사원의 정보가 삭제되도록 프로그래밍 진행
CREATE OR REPLACE TRIGGER EMP01_TRIGGER3
    AFTER DELETE ON EMP01
    FOR EACH ROW
BEGIN
    -- SAL01 해당되는 사원의 정보가 삭제
    DELETE FROM SAL01 WHERE EMPNO = :OLD.EMPNO;
    DBMS_OUTPUT.PUT_LINE('번호 ' || :OLD.EMPNO || '가 삭제되었습니다.');
END;
/

DELETE FROM EMP01 WHERE EMPNO = 4;
SELECT * FROM EMP01;

